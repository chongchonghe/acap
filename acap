#!/usr/bin/env python
""" acap.py
ACAP, an Awesome Calculator for Astronomers and Physicists.
Author: Chong-Chong He (che1234@umd.edu)
Date: 2020-06-20

A calculator written in python with GUI.
"""

import os
import sys
from math import *
import numpy as np
from numpy import sqrt
from astropy import units as U
from astropy import constants as C
from astropy.constants import *
from datetime import datetime
# from astropy.cosmology import WMAP9
import logging

# The following variables can be changed by the user
#========================================================================
SCALE = 1.1         # Recommended: 1.3 on 1080p, 1.0 on a retina display.
PRINT_LOG = True    # Toggle printing inputs and outputs to ~/.acap_history
DIGITS = 6          # number of significant digits in the scientific notation
DOC_HEIGHT = 6      # height of the documentation pane (in lines)
HEIGHT = 520.0      # height of the whole window (in pixels)
INP_HEIGHT = 5      # height of the input pane (in lines)
#========================================================================

# True or False. Use <Enter> to calculate instead of 'Calculate' button
USE_ENTER = False
REQUIRE_UNDERSCORE = False

Units = {
    'Length': ['m', 'cm', 'mm', 'um', 'nm', 'Angstrom', 'km', 'au', 'AU', 'pc', 'kpc', 'Mpc', 'lyr',],
    'Mass': ['kg', 'g', 'M_sun'],
    'Density': ['mpcc'],
    'Time': ['s', 'yr', 'Myr', 'Gyr',],
    'Energy': ['J', 'erg', 'eV', 'keV', 'MeV', 'GeV'],
    'Power': ['W'],
    'Pressure': ['Pa', 'bar', 'mbar'],
    'Frequency': ['Hz', 'kHz', 'MHz', 'GHz',],
    'Temperature': ['K',],
    'Angular size': ['radian', 'arcmin', 'arcsec', 'arcsec2'],
    'Astronomy': ['Lsun', 'Jy', 'mJy', 'MJy'],
    'Composite': ['m2', 'm3', 'cm2', 'cm3', 's2', 'pc2', 'pc3']
    }
UNITS_USER = ['Ang', 'mpcc', 'm2', 'm3', 'cm2', 'cm3', 's2', 'pc2',
              'pc3', 'arcsec2']
_unit_skip = ['au', 'pc', 'M_sun']  # defined as constants instead of units
# Extra
for _key in Units.keys():
    for _unit in Units[_key]:
        if _unit not in _unit_skip + UNITS_USER:
            locals()[_unit] = eval("U.{}".format(_unit))

# User defined units
# Ang = 0.1 * nm
esu = e.esu
Ang = U.def_unit('Ang', 0.1 * nm)
mpcc = U.def_unit('mpcc', m_p / cm**3)
# Msun = M_sun
m2 = m**2
m3 = m**3
cm2 = cm**2
cm3 = cm**3
s2 = s**2
pc2 = pc**2
pc3 = pc**3
# deg = pi / 180. * radian
arcsec2 = arcsec**2

# Cosmology
# H0 = WMAP9.H0

# from sympy.printing.str import StrPrinter
# class CustomStrPrinter(StrPrinter):
#     def _print_Float(self, expr):
#         return '{:.3e}'.format(expr)

IS_SCI = 0

class EvalError(Exception):
    """Error in variable assignment"""
    pass

def delete(window):
    window.delete(1.0, 'end')

def focusText(event, window):
    window.config(state='normal')
    window.focus()
    window.config(state='disabled')

def update_text(window, text, tag=None):
    """ Update texts of a Text widget. Make it uneditable. """
    window.configure(state='normal')
    delete(window)
    if tag is None:
        window.insert(1.0, text)
    elif tag == 'red':
        window.insert(1.0, text, 'color')
    elif tag == 'vcenter':
        window.insert(1.0, text, 'vcenter')
    window.configure(state='disabled')

def print_log(*args):
    print(*args)
    if PRINT_LOG:
        with open(os.path.join(os.path.expanduser('~'), ".acap_history"), 'a') as f:
            print(*args, file=f)

def main():

    print_log('')
    print_log('Running ACAP on ' + str(datetime.now()))

    # transformations = standard_transformations +\
    #     (restrict_e_notation_precision,) +\
    #     (implicit_multiplication,) +\
    #     (convert_xor,)
    transformations = standard_transformations +\
        (implicit_multiplication,) +\
        (convert_xor,)

    win = tk.Tk()
    win.tk.call('tk', 'scaling', SCALE)
    win.title("ACAP")
    win.geometry('{:d}x{:d}'.format(int(380.0*SCALE), int(HEIGHT*SCALE)))

    # Documentation
    doc = """\
Welcome to ACAP, an Awesome Calculator for Astronomers and Physicists!
Author: Chong-Chong He (che1234@umd.edu)

Shift + Enter or 'Calculate' button to evaluate. Enter to break line.

Example 1:  m_p
Example 2:  sqrt(G M_sun / au)
Example 3:  1 arcsec * 3 Mpc
Example 4:  rho = 100 mpcc
            tff = sqrt(1 / (G rho))
            cs = 10 km/s
            tff * cs

The results are shown in the following units: CGS, USER, and SI.

New feature: variable assignment. Note that the user defined variable must begin with an underscore (_) to avoid conflict with predefined variables. See Example 5 above.

"""
    doc += "\n".join(C.__doc__.splitlines()[13:]) + "\n"
    doc += "\n"
    doc += "The following units are available:\n\n"
    for _key in Units.keys():
        doc += "{:s} | {}\n".format(_key.rjust(12), ", ".join(Units[_key]))
    doc += \
"""
Command math operations are available. For instance, sin, cos, exp, ! (factorial), ^ (power), sqrt

More (composite) units are available for conversion. To learn more bout available units, google 'astropy units'.

About CGS units in E&M: use 'esu' as the electron charge in ESU system, so the Coulomb's Law is F = q1 q2 / r^2.
"""

    fontbig = "-size {:d}".format(int(16*SCALE))
    fontnormal = "-size {:d}".format(int(12*SCALE))
    scrollbar = tk.Scrollbar(win)
    scrollbar.pack(side='right', fill='y')
    # text_doc = tk.Text(win, height=16, font=font.Font(family='TkFixedFont'))
    text_doc = tk.Text(win, height=DOC_HEIGHT/SCALE, bd=10, font='TkFixedFont',
                       wrap='word')
    text_doc.pack(fill='x', padx=5, pady=5, ipadx=5, ipady=5)
    text_doc.insert(tk.END, doc, )
    text_doc.config(state=tk.DISABLED)
    text_doc.config(yscrollcommand=scrollbar.set)
    scrollbar.config(command=text_doc.yview)

    # input1
    if USE_ENTER:
        input1 = tk.Entry(win, font=fontbig, justify='center')
    else:
        input1 = tk.Text(win, height=INP_HEIGHT, font="-size 16", padx=5, pady=5)
        input1.pack(fill='x', padx=5)

    # error message
    # row0 = tk.Label(win, text="", anchor='center', )
    row0 = tk.Label(win, text="Outputs (CGS, USER, SI):", anchor='w', justify='left',
                    font=fontnormal)

    # four rows for output

    row_cgs = tk.Frame(win)
    lab_cgs = tk.Label(row_cgs, width=10, text='CGS', anchor='e', font=fontnormal)
    # out_cgs = tk.Text(row_cgs, anchor='w', padx=20, height=1, font=fontbig)
    out_cgs = tk.Text(row_cgs, padx=10, height=1, font=fontbig,
                      highlightthickness=0)
    out_cgs.bind('<Button-1>', lambda t: focusText(t, out_cgs))

    row_si = tk.Frame(win)
    lab_si = tk.Label(row_si, width=10, text='SI', anchor='e',
                      justify='center', font=fontnormal)
    # out_si = tk.Label(row_si, anchor='w', padx=20, font=fontbig)
    out_si = tk.Text(row_si, padx=10, height=5, font=fontbig,
                     highlightthickness=0, )
    out_si.tag_configure('vcenter', justify='left')
    out_si.bind('<Button-1>', lambda t: focusText(t, out_si))

    row_user = tk.Frame(win)
    ent_user = tk.Entry(row_user, width=10, justify='right', borderwidth=0,
                        font=fontnormal)
    # out_user = tk.Label(row_user, anchor='w', padx=20, font=fontbig)
    out_user = tk.Text(row_user, padx=10, height=1, font=fontbig,
                       highlightthickness=0)
    out_user.bind('<Button-1>', lambda t: focusText(t, out_user))
    out_user.tag_config('color', foreground='red')  # add a tag for 'red text'

    def evaluate_user(event, ret):
        unit = ent_user.get()
        if unit == '':
            update_text(out_user, "")
            # out_user.config(text="", fg='black')
            return
        # f_fmt = '{{:.{}e}}'.format(DIGITS-1) if IS_SCI else '{}'
        f_fmt = '{{:.{}e}}'.format(DIGITS-1) if IS_SCI else "{{:.{}g}}".format(DIGITS+1)
        if type(ret) is int:
            update_text(out_user, ret)
            # out_user.config(text=ret, fg='black')
        # elif type(ret) in [float, np.float, np.float64]:
        elif type(ret) in [float, np.float, np.float64]:
            update_text(out_user, f_fmt.format(ret))
            # out_user.config(text=f_fmt.format(ret), fg='black')
        else:
            try:
                if unit in UNITS_USER:
                    ret_loc = ret.to(eval(unit))
                else:
                    ret_loc = ret.to(unit)
                if type(ret_loc) is int:
                    update_text(out_user, ret_loc.format(ret))
                    # out_user.config(text=ret_loc, fg='black')
                elif type(ret_loc) is float:
                    update_text(out_user, f_fmt.format(ret_loc))
                    # out_user.config(text=f_fmt.format(ret_loc), fg='black')
                else:
                    text=f_fmt.format(ret_loc.value) + " " + str(ret_loc._unit)
                    update_text(out_user, text)
                    # out_user.config(text=f_fmt.format(ret_loc.value) + " " +
                    #                 str(ret_loc._unit), fg='black')
            except UnitConversionError as uce:
                update_text(out_user, uce, 'red')
                # out_user.config(text=uce, fg='red')
            except ValueError as _e:
                update_text(out_user, _e, 'red')
                # out_user.config(text=_e, fg='red')

    # define the calculate function
    def calculate(event=None):
        # clean outputs prior doing anything
        update_text(out_cgs, "")
        update_text(out_si, "")
        update_text(out_user, "")
        row0.config(text="")

        # read input
        if USE_ENTER:           # use <Enter> to execute calculation
            inp = input1.get()
            if inp == "":       # if empty
                update_text(out_cgs, "")
                # print_log("Output (cgs):", "")
                update_text(out_si, "", 'vcenter')
                update_text(out_user, "")
                # out_si.config(text="")
                # out_user.config(text="")
                return
        else:                   # use Calculate button
            if input1.compare("end-1c", "==", "1.0"):  # if empty
                update_text(out_cgs, "")
                print_log("-Output (cgs):", "")
                update_text(out_si, "", 'vcenter')
                update_text(out_user, "")
                return
            inp = input1.get(1.0, tk.END)
        # logging.info(repr("inp = {}".format(inp)))
        # parse input

        # removing tracing '\n'
        # count = 0
        # while inp[-1] == '\n' and count < 100:
        #     inp = inp[:-1]
        #     count += 1
        inp = inp.strip()

        # print input to terminal
        if '\n' in inp:
            print_log("+Input:\n" + inp)
        else:
            print_log("+Input:", inp)

        def parse_and_eval(expr, local_vars_={}):
            for item in local_vars_:
                locals()[item] = local_vars_[item]
            try:
                with evaluate(False):
                    inp_expr = parse_expr(expr, transformations=transformations, evaluate=False)
                    inp_expr = str(inp_expr)
                    # logging.info(repr("Parsed inp = {}".format(inp_expr)))
            except Exception as error_msg:
                row0.config(text=textwrap.fill(str(error_msg), 80), fg='red')
                raise EvalError
            input_parse.config(text=inp_expr)
            # print_log("Input-paresed:", CustomStrPrinter().doprint(inp_expr))

            # get the results
            # global Ret
            error_msg = None
            try:
                Ret = eval(inp_expr)
            except NameError as _ne:
                error_msg = "Error: " + str(_ne)
                # row0.config(text=, fg='red')
                # return
            except SyntaxError as _se:
                error_msg = "Error: " + str(_se)
                # row0.config(text="Error: " + str(_se), fg='red')
                # return
            except Exception as _e:
                error_msg = "Unexpected error: " + str(_e)
                # row0.config(text="Unexpected error: " + str(_e), fg='red')
                # return
            if error_msg is not None:
                update_text(out_cgs, "")
                # out_cgs.config(text="")
                print_log("-Output (cgs):", "")
                update_text(out_si, "")
                # out_si.config(text="")
                row0.config(text=textwrap.fill(error_msg, 80), fg='red')
                raise EvalError
            return inp_expr, Ret

        # split lines
        var_err = "Error: assigned variable must begin with _ (underscore)"
        local_vars = {}
        if '\n' in inp:
            lines = inp.split('\n')  # this ensures a list
            n_line = len(lines)
            logging.info('Lines:')
            for count, line in enumerate(lines):
                logging.info(repr(line))
                if count >= n_line - 1:  # last line
                    inp = line
                    break
                # remove spaces
                line = line.strip()
                items = line.split('=')
                if len(items) > 2:
                    row0.config(text='Multiple equal signs found in variable assignment',
                                fg='red')
                    return
                if len(items) == 1:
                    continue
                var, value = items
                var = var.strip()
                if REQUIRE_UNDERSCORE and var[0] != '_':
                    row0.config(text=var_err, fg='red')
                    return
                if ' ' in var:
                    row0.config(text='Variable should not have space in it',
                                fg='red')
                    return
                try:
                    parsed_expr, ret = parse_and_eval(value, local_vars)
                except EvalError:
                    return
                local_vars[var] = ret

        try:
            _, Ret = parse_and_eval(inp, local_vars)
        except EvalError:
            return

        # Display results
        # f_fmt = '{{:.{}e}}'.format(DIGITS-1) if IS_SCI else '{}'
        f_fmt = '{{:.{}e}}'.format(DIGITS-1) if IS_SCI else "{{:.{}g}}".format(DIGITS)
        row0.config(text='Outputs (CGS, USER, SI):', fg='black')
        if type(Ret) in [int, float, np.float, np.float64]:
            # has no units
            if type(Ret) is not int:
                ret = f_fmt.format(Ret)
            else:
                ret = Ret
            update_text(out_cgs, ret)
            print_log("-Output (cgs):", ret)
            update_text(out_si, ret, 'vcenter')
        else:
            # has units
            # SI units
            if type(Ret.si) is Quantity:
                logging.info("here #399")
                update_text(out_si, f_fmt.format(Ret.si))
            # if type(Ret.si) is CompositeUnit:
            #     # TODO: sci here. Seems impossible to work
            #     out_si.config(text=Ret.si)
            else:
                # Physical constants. Display full description.
                logging.info("Here #407")
                update_text(out_si, Ret.si)
            # CGS
            try:
                if type(Ret.cgs) is CompositeUnit:
                    logging.info("here #410")
                    update_text(out_cgs, Ret.cgs)
                    print_log("-Output (cgs):", Ret.cgs)
                else:
                    logging.info("here #415")
                    # _text = f_fmt.format(Ret.cgs.value) + ' ' + str(Ret.cgs._unit)
                    # update_text(out_cgs, _text)
                    # print_log("-Output (cgs):", _text)
                    update_text(out_cgs, f_fmt.format(Ret.cgs))
                    print_log("-Output (cgs):", f_fmt.format(Ret.cgs))
            except Exception as _e:
                row0.config(text=textwrap.fill(str(_e), 80), fg='red')
        evaluate_user(None, Ret)

    # def calculate(event=None):
    #     try:
    #         unsafe_calculate(event)
    #     except Exception as err:
    #         err_str = "{}".format(err).replace('\n', ' ')
    #         print(err_str)
    #         row0.config(text="Uncaught Error: {}".format(err_str), fg='red')

    def sci_switch():
        global IS_SCI
        IS_SCI = sci.get()
        calculate()

    if USE_ENTER:
        input1.bind("<Return>", calculate)
        input1.pack(fill='x', padx=5, pady=5, ipady=16)
    else:
        input1.bind("<Shift-Return>", calculate)

    # calculate button
    sci = tk.IntVar()
    row_cal = tk.Frame(win)
    row_cal.pack(fill='x', padx=5, pady=5)
    if not USE_ENTER:
        tk.Button(row_cal, text="Calculate", command=calculate).pack(side='top')

    tk.Checkbutton(row_cal, text='Scientific', variable=sci,
                   onvalue=1, font="-size {:d}".format(int(12*SCALE)),
                   offvalue=0, command=sci_switch).pack(side='right')

    input_fm = tk.Frame(win)
    input_lab = tk.Label(input_fm, width=14, text='Python input:',
                         anchor='w', font="-size {:d}".format(int(12*SCALE)))
    input_parse = tk.Label(input_fm, justify='center', anchor='w',
                           font="-size {:d}".format(int(12*SCALE)))
    input_fm.pack(fill='x', padx=5, pady=5)
    input_lab.pack(side='left')
    input_parse.pack(side='right', expand=1, fill='x')

    # display parsed input
    # pack error message
    row0.pack(fill='both', padx=5, pady=6)

    # pack the four rows
    row_cgs.pack(fill='x', padx=5, pady=5)
    lab_cgs.pack(side='left')
    out_cgs.pack(side='right', expand=1, fill='x', padx=10)

    row_user.pack(fill='x', padx=5, pady=5)
    ent_user.bind("<Return>", calculate)
    # ent_user.bind("<Return>", evaluate_user)
    ent_user.pack(side='left', ipady=4)
    out_user.pack(side='right', expand=1, fill='x', padx=8)

    row_si.pack(fill='x', padx=5, pady=5)
    lab_si.pack(side='left')
    out_si.pack(side='right', expand=1, fill='x', padx=10)

    win.mainloop()


if __name__ == "__main__":

    from astropy.units.core import UnitConversionError, CompositeUnit
    from astropy.units.quantity import Quantity
    import tkinter as tk
    # from tkinter.filedialog import askdirectory
    import textwrap
    from sympy import evaluate
    from sympy.parsing.sympy_parser import parse_expr, standard_transformations, \
        implicit_multiplication, convert_xor

    if len(sys.argv) >= 2:
        level_config = {'debug': logging.DEBUG, 'info': logging.INFO}
        if sys.argv[1] in level_config:
            logging.basicConfig(level=level_config[sys.argv[1]])
            print("Running in {} mode".format(sys.argv[1]))

    # try:
    #     main()
    # except Exception as uncaught:
    #     print(uncaught)
    main()
